{
  "projects": {
    "snake": {},
    "muttonbash": {
      "functions": {
        "menu": "menu.js",
        "characterName": "characterName.js"
      }
    },
    "3dClick": {
      "functions": {
        "boxUpdate": "boxRotateUpdate.js",
        "socketBalls": "sockets/socketBalls.js",
        "socketBallsRotate": "sockets/socketBallsRotate.js"
      }
    },
    "elements": {
      "functions": {
        "boxUpdate": "boxRotateUpdate.js",
        "socketBalls": "sockets/socketBalls.js",
        "socketBallsRotate": "sockets/socketBallsRotate.js"
      },
      "path": "/element",
      "page": "element.hbs"
    }
  },
  "jsonGenerator": {
    "position": {
      "attributes": {
        "x": true,
        "y": true
      }
    },
    "anchor": {
      "attributes": {
        "x": true,
        "y": true
      }
    },
    "scale": {
      "attributes": {
        "x": true,
        "y": true
      }
    },
    "angle": {
      "attributes": {
        "degree": true
      }
    }
  },
  "blacklist": [
    "test.txt"
  ],
  "abraConfig": {
    "phaserSpriteTypes": [
      "png",
      "jpg",
      "jpeg"
    ],
    "phaserVideoTypes": [
      "mp4",
      "avi",
      "webm"
    ],
    "phaserAudioTypes": [
      "mp3",
      "ogg",
      "wav"
    ],
    "phaserPort": 1339,
    "phaserPath": "assets/"
  },
  "abraFunctions": {
    "abraLoad": "abraLoadAsset.js",
    "abraCreate": "abraCreateAsset.js",
    "preloadGameScene": "abraPreloadGameScene.js"
  },
  "menu": "menu = game.add.container(0, 0); ; var panel1_start = game.add.sprite(400, 225, 'bar 1 text').setOrigin(0).setScale(0.9) ; var newButton = game.add.sprite(750, 460, 'newButton').setInteractive().setOrigin(0).setScale(0.8, 0.7); ; var joinButton = game.add.sprite(750, 800, 'joinButton').setInteractive().setOrigin(0).setScale(0.8, 0.7); ; var settingsButton = game.add.sprite(750, 1150, 'settingsButton').setInteractive().setOrigin(0).setScale(0.8, 0.7); ; var panel1_close = game.add.sprite(400, 1425, 'bar 1').setOrigin(0).setScale(0.9).setFlipY(true); ; ; menu.add([panel1_start, newButton, joinButton, settingsButton, panel1_close]); ; ; game.anims.create({ key: 'buttonOff', frames: game.anims.generateFrameNumbers('greenButton', { start: 0, end: 0 }), frameRate: 60 }); ; ; game.anims.create({ key: 'buttonOffNew', frames: game.anims.generateFrameNumbers('newButton', { start: 1, end: 1 }), frameRate: 60 }); ; ; game.anims.create({ key: 'buttonOffJoin', frames: game.anims.generateFrameNumbers('joinButton', { start: 1, end: 1 }), frameRate: 60 }); ; ; game.anims.create({ key: 'buttonOffSettings', frames: game.anims.generateFrameNumbers('settingsButton', { start: 1, end: 1 }), frameRate: 60 }); ; ; game.anims.create({ key: 'buttonOn', frames: game.anims.generateFrameNumbers('greenButton', { start: 1, end: 1 }), frameRate: 60 }); ; ; game.anims.create({ key: 'buttonOnNew', frames: game.anims.generateFrameNumbers('newButton', { start: 0, end: 0 }), frameRate: 60 }); ; ; game.anims.create({ key: 'buttonOnJoin', frames: game.anims.generateFrameNumbers('joinButton', { start: 0, end: 0 }), frameRate: 60 }); ; ; game.anims.create({ key: 'buttonOnSettings', frames: game.anims.generateFrameNumbers('settingsButton', { start: 0, end: 0 }), frameRate: 60 }); ; ; newButton.anims.play('buttonOffNew'); ; joinButton.anims.play('buttonOffJoin'); ; settingsButton.anims.play('buttonOffSettings'); ; ; newButton.on('pointerover', function () { newButton.anims.play('buttonOnNew'); }); ; ; joinButton.on('pointerover', function () { ; ; joinButton.anims.play('buttonOnJoin'); ; ; }); ; ; settingsButton.on('pointerover', function () { ; ; settingsButton.anims.play('buttonOnSettings'); ; ; }); ; ; ; newButton.on('pointerout', function () { ; ; newButton.anims.play('buttonOffNew'); ; ; }); ; ; joinButton.on('pointerout', function () { ; ; joinButton.anims.play('buttonOffJoin'); ; ; }); ; ; settingsButton.on('pointerout', function () { ; ; settingsButton.anims.play('buttonOffSettings'); ; ; }); ; ; newButton.on('pointerup', function (pointer) { ; ; menu.visible = false; ; characterName.visible = true; ; });",
  "characterName": "characterName = game.add.container(0, 0); ; var panel1_start = game.add.sprite(400, 225, 'bar 1 text').setOrigin(0).setScale(0.9) ; var closeButton = game.add.sprite(1590, 265, 'closeButton').setInteractive().setOrigin(0); ; var panel1_bar1 = game.add.sprite(680, 550, 'bar 2').setInteractive().setOrigin(0); ; var panel1_bar2 = game.add.sprite(680, 850, 'bar 2').setInteractive().setOrigin(0); ; var enterButton = game.add.sprite(750, 1150, 'enterButton').setInteractive().setOrigin(0).setScale(0.8, 0.7); ; var panel1_close = game.add.sprite(400, 1425, 'bar 1').setOrigin(0).setScale(0.9).setFlipY(true); ; ; ; ; ; game.anims.create({ key: 'buttonOffClose', frames: game.anims.generateFrameNumbers('closeButton', { start: 1, end: 1 }), frameRate: 60 }); ; ; game.anims.create({ key: 'buttonOnClose', frames: game.anims.generateFrameNumbers('closeButton', { start: 0, end: 0 }), frameRate: 60 }); ; ; game.anims.create({ key: 'buttonOffEnter', frames: game.anims.generateFrameNumbers('enterButton', { start: 1, end: 1 }), frameRate: 60 }); ; ; game.anims.create({ key: 'buttonOnEnter', frames: game.anims.generateFrameNumbers('enterButton', { start: 0, end: 0 }), frameRate: 60 }); ; ; closeButton.anims.play('buttonOffClose'); ; ; enterButton.anims.play('buttonOffEnter'); ; ; ; closeButton.on('pointerover', function () { closeButton.anims.play('buttonOnClose'); }); ; ; closeButton.on('pointerout', function () { ; ; closeButton.anims.play('buttonOffClose'); ; ; }); ; ; enterButton.on('pointerover', function () { enterButton.anims.play('buttonOnEnter'); }); ; ; enterButton.on('pointerout', function () { ; ; enterButton.anims.play('buttonOffEnter'); ; ; }); ; ; ; characterName.visible = false; ; ; closeButton.on('pointerup', function (pointer) { menu.visible = true; ; characterName.visible = false; ; }); ; ; var nameInput = game.add.dom(1134, 645).createFromCache('name'); ; var emailInput = game.add.dom(1134, 945).createFromCache('email'); ; ; ; nameInput.addListener('click'); ; ; nameInput.on('click', function (event) { console.log(\"CLICK\");}); ; ; emailInput.addListener('click'); ; ; emailInput.on('click', function (event) { console.log(\"CLICK\");}); ; ; ; ; characterName.add([panel1_start, panel1_bar1, enterButton, panel1_bar2, emailInput, closeButton, nameInput, panel1_close]); ; ; ",
  "boxUpdate": "{ var socketBall = Phaser.phaserConfig.socketBalls.name; xAxis = new Phaser.Math.Vector3(1, 0, 0); yAxis = new Phaser.Math.Vector3(0, 1, 0); zAxis = new Phaser.Math.Vector3(0, 0, 1); if (inputs.left.isDown) {; if (isPosition) {; cameras[socketBall].x -= 4; } else {; cameras[socketBall].rotate(0.01, xAxis); } } else if (inputs.right.isDown) {; if (isPosition) {; cameras[socketBall].x += 4; } else {; cameras[socketBall].rotate(-0.01, xAxis); } } if (inputs.up.isDown) {; if (inputs.shift.isDown) {; if (isPosition) {; cameras[socketBall].y += 4; } else {; cameras[socketBall].rotate(0.01, yAxis); } } else {; if (isPosition) {; cameras[socketBall].z += 4; } else {; cameras[socketBall].rotate(0.01, zAxis); } } } else if (inputs.down.isDown) {; if (inputs.shift.isDown) {; if (isPosition) {; cameras[socketBall].y -= 4; } else {; cameras[socketBall].rotate(-0.01, yAxis); } } else {; if (isPosition) {; cameras[socketBall].z -= 4; } else {; cameras[socketBall].rotate(-0.01, zAxis); } } } } ",
  "socketBalls": "game.input.on('gameobjectdown', function (pointer, gameObject) { ; ; if (inputs.shift.isUp && inputs.ctrl.isUp && gameObject.name === Phaser.phaserConfig.socketBalls.name) { ; ; socket.emits.deleteDot(gameObject.sprite3d); ; ; } else if(inputs.shift.isDown && inputs.ctrl.isUp && gameObject.name === Phaser.phaserConfig.socketBalls.name) { ; ; console.log(\"RAN\") ; socket.emits.grow({obj:gameObject.sprite3d, action:'grow'}); ; ; } else if(inputs.ctrl.isDown && gameObject.name === Phaser.phaserConfig.socketBalls.name) { ; ; socket.emits.grow({obj:gameObject.sprite3d, action:'shrink'}); ; ; }; ; ; }); ; ; socket.setSocket('deleteDot', function (gameObject) { ; ; var group = gameObject.name.group; ; var index = gameObject.name.index; ; sprites[group][index].size.x = 0; ; sprites[group][index].size.y = 0; ; }); ; ; socket.setSocket('grow', function (data) { ; ; var group = data.obj.name.group; ; var index = data.obj.name.index; ; sprites[group][index].size.x = data.action === 'grow' ? sprites[group][index].size.x + 25 : sprites[group][index].size.x + -25; ; sprites[group][index].size.y = data.action === 'grow' ? sprites[group][index].size.y + 25 : sprites[group][index].size.y -25; ; }); ; ; Phaser.phaserConfig.socketBalls = { name: \"blue_ball\" }; ; ; ",
  "socketBallsRotate": "if (cameras[Phaser.phaserConfig.socketBalls.name]) cameras[Phaser.phaserConfig.socketBalls.name].transformChildren(transform[Phaser.phaserConfig.socketBalls.name]); ; updateCamControls(); ; ; delete Phaser.phaserConfig.socketBallsRotate;",
  "abraLoad": "{ var phaserConfig = document.getElementById('phaserConfig').getAttribute('value'); document.getElementById('phaserConfig').remove(); var listFiles = document.getElementById('listFiles').getAttribute('value'); ; ; this.phaserConfig = JSON.parse(phaserConfig); Phaser.phaserConfig = JSON.parse(phaserConfig); var scene = this.game.scene.keys.PreloadScene; var game = this; document.getElementById('listFiles').remove(); var regEx = /^.*[\\\\\\/]/; var regEx2 = /([^\\/]*)\\/*$/; game.assetList = JSON.parse(listFiles); var gameScene = this.game.scene.keys.GameScene; game.assetList.forEach(function (file) {; ; ; if (Array.isArray(file)) {; ; var filename = file[0].replace(regEx, ''); var name = filename.substr(0, filename.lastIndexOf('.')); var lastFile; var newFileArray = []; var pathArray = file[0].split('/'); if (dirAdd === true) {; ; var lastDir = pathArray[pathArray.length - 2] + '-'; } else {; ; var lastDir = ''; } file.forEach(function (newFile) {; newFileArray.push(newFile); lastFile = newFile; }); ; console.log(\"TEST \" , name); if (filename == name + '.mp3' || filename == name + '.ogg' || filename == name + '.wav') {; scene.load.audio(lastDir + name, newFileArray); } else if (game.phaserConfig['bitmap'] && game.phaserConfig['bitmap'].join().includes(name) && !this.game.phaserConfig.spritesheet[name]) {; scene.load.bitmapFont(lastDir + name, file[1], file[0]); } else if (game.phaserConfig['bitmap'] && game.phaserConfig['bitmap'].join().includes(name) && this.game.phaserConfig.spritesheet[name]) {; scene.load.atlasXML(lastDir + name, file[1], file[0]); } else if (file[1].toLowerCase().includes('.json') && this.game.phaserConfig.spritesheet[name]) {; scene.load.atlas(lastDir + name, file[0], file[1], Phaser.Loader.TEXTURE_ATLAS_JSON_HASH); } else if (file[1].toLowerCase().includes('.json')) {; scene.load.tilemap(lastDir + name, file[1], null, Phaser.Tilemap.TILED_JSON); scene.load.image(lastDir + name + '-tiles', file[0]); } else if (file[1].toLowerCase().includes('.html')) {; console.log(\"HTML \", file[1]); scene.load.html(lastDir + name, file[1]); ; } else if (file[1].toLowerCase().includes('.csv')) {; scene.load.tilemap(lastDir + name, file[1], null, Phaser.Tilemap.CSV); scene.load.image(lastDir + name + '-tiles', file[0]); } else { } } else {; var filename = file.replace(regEx, ''); var name = filename.substr(0, filename.lastIndexOf('.')); var objName = file.match(regEx2)[2]; var pathArray = file.split('/'); if (dirAdd) {; ; var lastDir = pathArray[pathArray.length - 2] + '-'; } else {; ; var lastDir = ''; ; } ; if (game.phaserConfig.spritesheet &&game.phaserConfig.spritesheet[name]) {; ; ; scene.load.spritesheet(lastDir + name, file, {\"frameHeight\": game.phaserConfig.spritesheet[name].height, \"frameWidth\": game.phaserConfig.spritesheet[name].width, \"startFrame\": 0, \"endFrame\": game.phaserConfig.spritesheet[name].frames}); } else if (filename == name + '.mp3' || filename == name + '.ogg' || filename == name + '.wav') {; scene.load.audio(lastDir + name, file); }else if (filename == name + '.html') {; scene.load.html(lastDir + name, file); } else if (filename.toLowerCase().includes('.json')) {; scene.load.json(name, file); } else if (filename.toLowerCase().includes('.mp4') || filename.toLowerCase().includes('.flv') || filename.toLowerCase().includes('.webm')) {; scene.load.video(lastDir + name, file); } else if (filename == name + '.txt') {; scene.load.text(lastDir + name, file); } else {; scene.load.image(lastDir + name, file); } scene.assetList = undefined; } }); ; ; }",
  "abraCreate": "{ function createSprite(obj) {; sprites[spriteNameAsset] = game.add.sprite(parseInt(lastPosX), parseInt(lastPosY), spriteName); if (obj.setInteractive) {; sprites[spriteNameAsset].setInteractive(); } if (obj.setInteractive && obj.group) {; ; game.input.setHitArea(sprites[obj.group].getChildren()); } ; } var game = this.game.scene.keys[mainScene]; var plugins = this.game.scene.keys.PreloadScene; var lastPosX, lastPosY, lastSclX, lastSclY, lastAnchX, lastAnchY, lastPivX, lastPivY, Ang; for (var key in Object.keys(spriteAttributes)) {; var arrayLengths = new Array(); spriteName = Object.keys(spriteAttributes)[key]; spriteNameAsset = Object.keys(spriteAttributes)[key]; var isLoop = false; if (spriteAttributes[spriteName].position && spriteAttributes[spriteName].position.x) {; if (!Array.isArray(spriteAttributes[spriteName].position.x)) {; spriteAttributes[spriteName].position.x = [spriteAttributes[spriteName].position.x]; arrayLengths.push(spriteAttributes[spriteName].position.x.length); } else {; arrayLengths.push(spriteAttributes[spriteName].position.x.length); }; if (spriteAttributes[spriteName].position.y) {; if (!Array.isArray(spriteAttributes[spriteName].position.y)) {; spriteAttributes[spriteName].position.y = [spriteAttributes[spriteName].position.y]; arrayLengths.push(spriteAttributes[spriteName].position.y.length); } else {; arrayLengths.push(spriteAttributes[spriteName].position.y.length); }; } } else {; spriteAttributes[spriteName].position = new Object(); spriteAttributes[spriteName].position.x = [0]; arrayLengths.push(spriteAttributes[spriteName].position.x.length); spriteAttributes[spriteName].position.y = [0]; arrayLengths.push(spriteAttributes[spriteName].position.y.length); }; if (spriteAttributes[spriteName].anchor) {; if (spriteAttributes[spriteName].anchor.x) {; if (!Array.isArray(spriteAttributes[spriteName].anchor.x)) {; spriteAttributes[spriteName].anchor.x = [spriteAttributes[spriteName].anchor.x]; arrayLengths.push(spriteAttributes[spriteName].anchor.x.length); } else {; arrayLengths.push(spriteAttributes[spriteName].anchor.x.length); }; }; if (spriteAttributes[spriteName].anchor.y) {; if (!Array.isArray(spriteAttributes[spriteName].anchor.y)) {; spriteAttributes[spriteName].anchor.y = [spriteAttributes[spriteName].anchor.y]; arrayLengths.push(spriteAttributes[spriteName].anchor.y.length); } else {; arrayLengths.push(spriteAttributes[spriteName].anchor.y.length); }; }; }; if (spriteAttributes[spriteName].scale) {; if (spriteAttributes[spriteName].scale.x) {; if (!Array.isArray(spriteAttributes[spriteName].scale.x)) {; spriteAttributes[spriteName].scale.x = [spriteAttributes[spriteName].scale.x]; arrayLengths.push(spriteAttributes[spriteName].scale.x.length); } else {; spriteAttributes[spriteName].scale.x = spriteAttributes[spriteName].scale.x; arrayLengths.push(spriteAttributes[spriteName].scale.x.length); }; }; if (spriteAttributes[spriteName].scale.y) {; if (!Array.isArray(spriteAttributes[spriteName].scale.y)) {; spriteAttributes[spriteName].scale.y = [spriteAttributes[spriteName].scale.y]; arrayLengths.push(spriteAttributes[spriteName].scale.y.length); } else {; spriteAttributes[spriteName].scale.y = spriteAttributes[spriteName].scale.y; arrayLengths.push(spriteAttributes[spriteName].scale.y.length); }; }; }; if (spriteAttributes[spriteName].pivot) {; if (spriteAttributes[spriteName].pivot.x) {; if (!Array.isArray(spriteAttributes[spriteName].pivot.x)) {; spriteAttributes[spriteName].pivot.x = [spriteAttributes[spriteName].pivot.x]; arrayLengths.push(spriteAttributes[spriteName].pivot.x.length); } else {; spriteAttributes[spriteName].pivot.x = spriteAttributes[spriteName].pivot.x; arrayLengths.push(spriteAttributes[spriteName].pivot.x.length); }; }; if (spriteAttributes[spriteName].pivot.y) {; if (!Array.isArray(spriteAttributes[spriteName].pivot.y)) {; spriteAttributes[spriteName].pivot.y = [spriteAttributes[spriteName].pivot.y]; arrayLengths.push(spriteAttributes[spriteName].pivot.y.length); } else {; spriteAttributes[spriteName].pivot.y = spriteAttributes[spriteName].pivot.y; arrayLengths.push(spriteAttributes[spriteName].pivot.y.length); }; }; }; if (spriteAttributes[spriteName].angle) {; if (spriteAttributes[spriteName].angle) {; if (!Array.isArray(spriteAttributes[spriteName].angle)) {; spriteAttributes[spriteName].angle = [spriteAttributes[spriteName].angle]; arrayLengths.push(spriteAttributes[spriteName].angle.length); } else {; spriteAttributes[spriteName].angle = spriteAttributes[spriteName].angle; arrayLengths.push(spriteAttributes[spriteName].angle.length); }; }; }; if (arrayLengths.length > 0) {; arrayLengths.sort(function (a, b) { return b - a }); } else {; arrayLengths.push('1'); }; spriteNameAsset = spriteName; for (key = 0; key < arrayLengths[0]; key++) {; if (spriteAttributes[spriteName].position.x && spriteAttributes[spriteName].position.x[key]) {; lastPosX = spriteAttributes[spriteName].position.x[key]; if (spriteAttributes[spriteName].position.x.length > 1) {; isLoop = true; }; } else {; if (lastPosX) {; } else {; }; }; if (spriteAttributes[spriteName].position.y && spriteAttributes[spriteName].position.y[key]) {; lastPosY = spriteAttributes[spriteName].position.y[key]; if (spriteAttributes[spriteName].position.y.length > 1) {; isLoop = true; }; } else {; if (lastPosY) {; } else {; }; }; if (spriteAttributes[spriteName].anchor) {; if (spriteAttributes[spriteName].anchor.x && spriteAttributes[spriteName].anchor.x[key]) {; lastAnchX = spriteAttributes[spriteName].anchor.x[key]; if (spriteAttributes[spriteName].anchor.x.length > 1) {; isLoop = true; }; } else {; if (spriteAttributes[spriteName].anchor.y && spriteAttributes[spriteName].anchor.y[key]) {; if (!lastAnchX) {; lastAnchX = 0; }; } else {; delete spriteAttributes[spriteName].anchor.y; }; }; if (spriteAttributes[spriteName].anchor.y && spriteAttributes[spriteName].anchor.y[key]) {; lastAnchY = spriteAttributes[spriteName].anchor.y[key]; if (spriteAttributes[spriteName].anchor.y.length > 1) {; isLoop = true; }; } else {; if (spriteAttributes[spriteName].anchor.x && spriteAttributes[spriteName].anchor.x[key]) {; if (!lastAnchY) {; lastAnchY = 0; }; } else {; delete spriteAttributes[spriteName].anchor.x; }; }; }; if (spriteAttributes[spriteName].scale) {; if (spriteAttributes[spriteName].scale.x && spriteAttributes[spriteName].scale.x[key]) {; lastSclX = spriteAttributes[spriteName].scale.x[key]; if (spriteAttributes[spriteName].scale.x.length > 1) {; isLoop = true; }; } else {; if (spriteAttributes[spriteName].scale.y && spriteAttributes[spriteName].scale.y[key]) {; if (!lastSclX) {; lastSclX = 0; }; } else {; delete spriteAttributes[spriteName].scale.y; }; }; if (spriteAttributes[spriteName].scale.y && spriteAttributes[spriteName].scale.y[key]) {; lastSclY = spriteAttributes[spriteName].scale.y[key]; if (spriteAttributes[spriteName].scale.y.length > 1) {; isLoop = true; }; } else {; if (spriteAttributes[spriteName].scale.x && spriteAttributes[spriteName].scale.x[key]) {; if (!lastSclY) {; lastSclY = 0; }; } else {; delete spriteAttributes[spriteName].scale.x; }; }; }; if (spriteAttributes[spriteName].pivot) {; if (spriteAttributes[spriteName].pivot.x && spriteAttributes[spriteName].pivot.x[key]) {; lastPivX = spriteAttributes[spriteName].pivot.x[key]; if (spriteAttributes[spriteName].pivot.x.length > 1) {; isLoop = true; }; } else {; if (spriteAttributes[spriteName].pivot.y && spriteAttributes[spriteName].pivot.y[key]) {; if (!lastPivX) {; lastPivX = 0; }; } else {; delete spriteAttributes[spriteName].pivot.y; }; }; if (spriteAttributes[spriteName].pivot.y && spriteAttributes[spriteName].pivot.y[key]) {; lastPivY = spriteAttributes[spriteName].pivot.y[key]; if (spriteAttributes[spriteName].pivot.y.length > 1) {; isLoop = true; }; } else {; if (spriteAttributes[spriteName].pivot.x && spriteAttributes[spriteName].pivot.x[key]) {; if (!lastPivY) {; lastPivY = 0; }; } else {; delete spriteAttributes[spriteName].pivot.x; }; }; }; if (spriteAttributes[spriteName].angle && spriteAttributes[spriteName].angle[key]) {; Ang = spriteAttributes[spriteName].angle[key]; if (spriteAttributes[spriteName].angle.length > 1) {; isLoop = true; }; } else {; spriteAttributes[spriteName].angle = {}; }; if (isLoop) {; spriteNameAsset = key + \"-\" + spriteName; }; if (spriteAttributes[spriteName]['3dcamera']) {; groups[spriteName] = game.add.group(); var FOV = spriteAttributes[spriteName]['3dcamera'].FOV; var setZ = spriteAttributes[spriteName]['3dcamera'].setZ; var setPixelScale = spriteAttributes[spriteName]['3dcamera'].setPixelScale; cameras[spriteName] = game.cameras3d.add(FOV).setZ(setZ).setPixelScale(setPixelScale); sprites[spriteName] = cameras[spriteName].createRect(spriteAttributes[spriteName].count, spriteAttributes[spriteName].distance, spriteName); if (spriteAttributes[spriteName]['3dcamera'].blend) for (var i = 0; i < sprites[spriteName].length; i++) {; ; ; sprites[spriteName][i].gameObject.name = spriteName; game.input.setHitArea(sprites[spriteName][i].gameObject); sprites[spriteName][i].gameObject.sprite3d = sprites[spriteName][i]; sprites[spriteName][i].name = {group:spriteName,index:i} ; if (spriteAttributes[spriteName]['3dcamera'].transform) {; var rotateX = spriteAttributes[spriteName]['3dcamera'].transform.rotateX; var rotateY = spriteAttributes[spriteName]['3dcamera'].transform.rotateY; var rotateZ = spriteAttributes[spriteName]['3dcamera'].transform.rotateZ; transform[spriteName] = new Phaser.Math.Matrix4().rotateX(rotateX).rotateY(rotateY).rotateZ(rotateZ); } } } else {; if (spriteAttributes[spriteName].group) {; var group = spriteAttributes[spriteName].group; if (!sprites[group]) {; sprites[group] = game.add.group(); } createSprite(spriteAttributes[spriteName]); ; ; sprites[group].add(sprites[spriteNameAsset]); } else {; sprites[spriteNameAsset] = game.add.sprite(parseInt(lastPosX), parseInt(lastPosY), spriteName); } } if (lastSclX) {; sprites[spriteNameAsset].scaleX = lastSclX; }; if (lastSclY) {; sprites[spriteNameAsset].scaleY = lastSclY; }; if (lastPivX) {; sprites[spriteNameAsset].pivotX = parseInt(lastPivX); }; if (lastPivY) {; sprites[spriteNameAsset].pivotY = parseInt(lastPivY); }; if (Ang) {; sprites[spriteNameAsset].angle = parseInt(Ang); }; lastPosX = undefined; lastPosY = undefined; lastAnchX = undefined; lastAnchY = undefined; lastSclX = undefined; lastSclY = undefined; Ang = undefined; }; }; }",
  "preloadGameScene": "{ inputs = game.input.keyboard.createCursorKeys(); ; ; inputs.ctrl = game.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.CTRL); ; ; game.load.scenePlugin(\"Camera3DPlugin\", \"../js/plugins/camera3d.min.js\", \"Camera3DPlugin\", \"cameras3d\"); ; ; Function.apply(null, ['game', Phaser.phaserConfig.socketBalls])(game); ; ; socketBallsRotate = Function.apply(null, [Phaser.phaserConfig.socketBallsRotate]); ; };"
}